import Head from 'next/head'
import ModalEditeOrCreate from './list-modal-edite-or-create'
import Table from './table'
import Layout from '@/components/layout'
import Header from './header'
import { useRouter } from 'next/router'
import { useLists } from '@/hooks/lists'
import { useEffect, useState } from 'react'
import { GetServerSideProps } from 'next'
import { useItem } from '@/hooks/items'
import { Loading } from '@/components/loading'
import { ItemTypes } from '@/hooks/items/types'
import { maskCurrency } from '@/utils/mask'

export default function List(props: any) {
  const { featchListItems, listItems, loading } = useLists()
  const { closeModalItem, setCloseModalItem, setItem } = useItem()
  const [isVisible, setIsVisible] = useState(false)
  const [typeEditeOrCreate, setTypeEditeOrCreate] = useState('')

  const router = useRouter()

  useEffect(() => {
    featchListItems({ id: props.LIST_ID, inTheCart: 0 })
  }, [])

  useEffect(() => {
    if (closeModalItem) {
      featchListItems({ id: props.LIST_ID, inTheCart: 0 })
    }
  }, [closeModalItem])

  function handleBack() {
    router.push('/')
  }

  function handleCreateNewItem() {
    setItem({})
    setCloseModalItem(false)
    setIsVisible(!isVisible)
    setTypeEditeOrCreate('create')
  }

  const valueTotalList =
    listItems?.Item?.length === 0
      ? 0
      : listItems?.Item?.map(datum => datum.valueTotal)
          .reduce((a, b) => a + b)
          .toFixed(2)

  return (
    <Layout>
      <Head>
        <title>Itens da lista</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header
        handleCreateNewItem={handleCreateNewItem}
        handleBack={handleBack}
        amountTotalList={listItems.Item?.length}
        valueTotalList={String(valueTotalList)}
        renderComponent="list"
        listId={props.LIST_ID}
        title={`Lista: ${listItems.title}`}
      />

      <div className="w-full h-full max-w-screen-md bg-default overflow-auto drop-shadow-lg mt-1">
        {loading ? (
          <Loading />
        ) : (
          <Table
            item={listItems?.Item}
            isVisible={isVisible}
            setIsVisible={setIsVisible}
            setTypeEditeOrCreate={setTypeEditeOrCreate}
            renderComponent="list"
          />
        )}
      </div>
      {isVisible && (
        <ModalEditeOrCreate
          isVisible={isVisible}
          setIsVisible={setIsVisible}
          listId={listItems?.id}
          type={typeEditeOrCreate}
        />
      )}
    </Layout>
  )
}

export const getServerSideProps: GetServerSideProps = async context => {
  const id = context.query.id

  return {
    props: {
      LIST_ID: id,
    },
  }
}
